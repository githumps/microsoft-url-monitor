name: Monitor Intune Endpoint Lists

on:
  workflow_dispatch:
  schedule:
    # Daily at 07:00 AM US‑Eastern (11:00 UTC)
    - cron: '0 11 * * *'

permissions:
  contents: write

jobs:
  check-endpoints:
    runs-on: self-hosted
    env:
      SLACK_WEBHOOK_URL:   ${{ secrets.SLACK_WEBHOOK_URL }}   # Slack Incoming Webhook (required)
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }} # Discord Incoming Webhook (optional)
      DATADOG_API_KEY:     ${{ secrets.DATADOG_API_KEY }}     # Datadog (optional)

    steps:
      #--------------------------------------------------------------
      # 0) Checkout code with push permissions
      #--------------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0           # needed to compare against history
          token: ${{ secrets.GITHUB_TOKEN }}

      #--------------------------------------------------------------
      # 1) Install prerequisites (jq + PowerShell if missing)
      #--------------------------------------------------------------
      - name: Install jq & PowerShell (if missing)
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y jq
          # Install PowerShell Core only if pwsh isn't present
          if ! command -v pwsh &>/dev/null; then
            echo "[setup] Installing PowerShell Core…"
            sudo apt-get install -y wget apt-transport-https software-properties-common
            wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update -y
            sudo apt-get install -y powershell
          fi

      #--------------------------------------------------------------
      # 2) Generate latest endpoint list (ips + urls)
      #--------------------------------------------------------------
      - name: Generate endpoint list
        id: generate
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $json = Invoke-RestMethod -Uri ("https://endpoints.office.com/endpoints/WorldWide?ServiceAreas=MEM&clientrequestid=$([guid]::NewGuid())")
          $ips  = $json | Where-Object { $_.ServiceArea -eq 'MEM' -and $_.ips  } | Select-Object -ExpandProperty ips  -Unique
          $urls = $json | Where-Object { $_.ServiceArea -eq 'MEM' -and $_.urls } | Select-Object -ExpandProperty urls -Unique

          $payload = [pscustomobject]@{
            timestamp = (Get-Date).ToString('o')
            ip_count  = $ips.Count
            url_count = $urls.Count
            ips       = $ips  | Sort-Object
            urls      = $urls | Sort-Object
          }

          $payload | ConvertTo-Json -Depth 5 | Set-Content endpoints.json -Encoding utf8

      #--------------------------------------------------------------
      # 3) Detect changes – *ignore timestamp* so only IP/URL changes alert
      #--------------------------------------------------------------
      - name: Detect changes (ignoring timestamp)
        id: changes
        run: |
          set -e
          # Strip timestamp line from new file
          grep -v '"timestamp"' endpoints.json > new_no_ts.json

          # Extract previous version, if it exists, and strip timestamp
          if git show HEAD:endpoints.json > prev_raw.json 2>/dev/null; then
            grep -v '"timestamp"' prev_raw.json > prev_no_ts.json
          else
            touch prev_no_ts.json
          fi

          if cmp -s prev_no_ts.json new_no_ts.json; then
            echo "No meaningful changes (IP/URL lists identical)"
            echo "changed=no" >> $GITHUB_OUTPUT
          else
            echo "Endpoint lists changed!"
            echo "changed=yes" >> $GITHUB_OUTPUT
          fi

      #--------------------------------------------------------------
      # 4) Commit & push when list changed
      #--------------------------------------------------------------
      - name: Commit updated list
        if: steps.changes.outputs.changed == 'yes'
        run: |
          set -e
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add endpoints.json
          git commit -m "chore(intune): update endpoints $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || exit 0
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      #--------------------------------------------------------------
      # 5) Capture diff (full for Slack, trimmed for Discord)
      #--------------------------------------------------------------
      - name: Capture diff
        if: steps.changes.outputs.changed == 'yes'
        id: diff
        run: |
          set -e
          FULL_DIFF=$(git show --pretty=medium --unified=5 --no-color HEAD)
          DISCORD_DIFF=$(echo "$FULL_DIFF" | head -n 60)
          if [ ${#DISCORD_DIFF} -gt 1800 ]; then
            DISCORD_DIFF=$(git diff --shortstat HEAD~1 HEAD)
          fi
          echo "FULL_DIFF<<EOF" >> $GITHUB_ENV
          echo "$FULL_DIFF" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "DISCORD_DIFF<<EOF" >> $GITHUB_ENV
          echo "$DISCORD_DIFF" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      #--------------------------------------------------------------
      # 6) Send notifications (Slack, Discord, Datadog)
      #--------------------------------------------------------------
      - name: Send notifications
        if: steps.changes.outputs.changed == 'yes'
        env:
          FULL_DIFF:   ${{ env.FULL_DIFF }}
          DISCORD_DIFF:${{ env.DISCORD_DIFF }}
          COMMIT_URL:  ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
        run: |
          set -e
          post_slack() {
            jq -n --arg text "ℹ️ *Intune Endpoint Update* (<${COMMIT_URL}|commit>)\n```diff\n${FULL_DIFF}\n```" '{text:$text}' | \
              curl -sS -X POST -H 'Content-Type: application/json' --data @- "$SLACK_WEBHOOK_URL"
          }
          post_discord() {
            jq -n --arg content "**Intune Endpoint Update**\n${COMMIT_URL}\n```diff\n${DISCORD_DIFF}\n```" '{content:$content}' | \
              curl -sS -X POST -H 'Content-Type: application/json' --data @- "$DISCORD_WEBHOOK_URL"
          }
          post_datadog() {
            curl -sS -X POST "https://api.datadoghq.com/api/v1/events" \
              -H "Content-Type: application/json" \
              -H "DD-API-KEY: $DATADOG_API_KEY" \
              -d "{\"title\":\"Intune endpoints changed\",\"text\":\"See commit: ${COMMIT_URL}\",\"alert_type\":\"info\",\"tags\":[\"intune\",\"endpoints\"]}"
          }
          [ -n "$SLACK_WEBHOOK_URL" ]   && post_slack   || echo "[notify] Slack webhook not configured – skipping"
          [ -n "$DISCORD_WEBHOOK_URL" ] && post_discord || echo "[notify] Discord webhook not configured – skipping"
          [ -n "$DATADOG_API_KEY" ]     && post_datadog || echo "[notify] Datadog API key not configured – skipping"